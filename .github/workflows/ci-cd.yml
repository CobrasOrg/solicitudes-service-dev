name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Tests de despliegue (siempre se ejecutan)
  deployment-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run deployment tests
        run: python scripts/deployment/test_deployment.py
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Tests completos (solo en push a main, NO en PRs)
  full-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Check if tests directory exists
        run: |
          if [ -d "tests" ]; then
            echo "✅ Tests directory found, running tests..."
            python -m pytest tests/ -v
          else
            echo "⚠️ Tests directory not found in main branch (expected for production sync)"
            echo "✅ Skipping tests as this is a production sync workflow"
          fi
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Deploy a staging (solo cuando se hace push a develop)
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [deployment-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Deploy to Fly.io Staging
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Sync to production repository (solo cuando se hace push a main)
  sync-to-production:
    runs-on: ubuntu-latest
    needs: [deployment-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Sync to Production Repository
        run: |
          echo "🔄 Sincronizando con repositorio de producción..."
          echo "📦 Excluyendo archivos de testing y desarrollo..."
          
          # Configurar git para el repo de producción
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Crear directorio temporal para producción
          TEMP_DIR=$(mktemp -d)
          echo "📁 Directorio temporal: $TEMP_DIR"
          
          # Crear archivo de exclusión
          cat > sync-exclude.txt << EOF
          tests/
          pytest.ini
          test_quick.py
          run_tests.py
          .pytest_cache/
          node_modules/
          package.json
          package-lock.json
          commitlint.config.js
          .pre-commit-config.yaml
          .git/
          venv/
          __pycache__/
          .env
          development-files/
          TESTING.md
          sync-to-production.bat
          sync-to-production.sh
          scripts/
          sync-exclude.txt
          .github/
          production-gitignore
          EOF
          
          # Copiar archivos de producción (excluyendo tests)
          rsync -av --exclude-from=sync-exclude.txt . "$TEMP_DIR/"
          
          # Cambiar al directorio temporal
          cd "$TEMP_DIR"
          
          # Inicializar git si no existe
          if [ ! -d ".git" ]; then
            git init
            # Usar token por defecto de GitHub Actions con formato correcto
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/CobrasOrg/solicitudes-service.git
          fi
          
          # Hacer commit de los cambios
          git add .
          git commit -m "Sync from development: $(date)"
          
          # Intentar push con diferentes estrategias
          echo "🔄 Intentando push a producción..."
          
          # Estrategia 1: Push a main
          if git push origin main; then
            echo "✅ Sincronización exitosa a branch 'main'!"
          else
            echo "⚠️ Falló push a main, intentando crear el branch..."
            
            # Estrategia 2: Crear main si no existe
            if git push origin HEAD:main; then
              echo "✅ Branch 'main' creado y sincronizado!"
            else
              echo "⚠️ Falló crear main, intentando master..."
              
              # Estrategia 3: Intentar master
              if git push origin master; then
                echo "✅ Sincronización exitosa a branch 'master'!"
              else
                echo "⚠️ Falló master, intentando crear master..."
                
                # Estrategia 4: Crear master
                if git push origin HEAD:master; then
                  echo "✅ Branch 'master' creado y sincronizado!"
                else
                  echo "❌ Error al sincronizar con producción"
                  echo "💡 Verifica que el repositorio existe y tienes permisos"
                  echo "🔧 Debug: Verificando permisos del token..."
                  curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/user
                  exit 1
                fi
              fi
            fi
          fi
          
          # Limpiar
          cd ..
          rm -rf "$TEMP_DIR"
          rm sync-exclude.txt
          
          echo "🎉 Sincronización completada. El repo de producción maneja su propio despliegue." 