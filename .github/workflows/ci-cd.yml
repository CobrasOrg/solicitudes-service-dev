name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]

jobs:
  # Tests de despliegue (siempre se ejecutan)
  deployment-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run deployment tests
        run: python scripts/deployment/test_deployment.py
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Tests completos (solo en push a main, NO en PRs)
  full-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Check if tests directory exists
        run: |
          if [ -d "tests" ]; then
            echo "‚úÖ Tests directory found, running tests..."
            python -m pytest tests/ -v
          else
            echo "‚ö†Ô∏è Tests directory not found in main branch (expected for production sync)"
            echo "‚úÖ Skipping tests as this is a production sync workflow"
          fi
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Deploy a staging (solo cuando se hace push a develop)
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [deployment-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Deploy to Fly.io Staging
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          BASE_URL: ${{ secrets.STAGING_BASE_URL }}

  # Sync to production repository (solo cuando se hace push a main)
  sync-to-production:
    runs-on: ubuntu-latest
    needs: [deployment-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Notify Production Sync Required
        run: |
          echo "üîÑ Push a main detectado"
          echo "üìã Para sincronizar con producci√≥n, ejecuta manualmente:"
          echo "   git push origin main"
          echo "   # Luego haz push al repo de producci√≥n"
          echo "‚úÖ Tests de despliegue completados exitosamente"
          echo "üí° El repo de producci√≥n maneja su propio despliegue" 