#!/usr/bin/env python3
"""
Script de pruebas de despliegue para el servicio de solicitudes.
Verifica que la aplicaci√≥n est√© lista para ser desplegada.
"""

import asyncio
import os
import sys
import requests
from datetime import datetime

def print_header():
    """Imprime el encabezado del script"""
    print("üöÄ PRUEBAS DE DESPLIEGUE - SERVICIO DE SOLICITUDES")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def test_environment_variables():
    """Prueba que las variables de entorno requeridas est√©n configuradas"""
    print("üîß Verificando variables de entorno...")
    
    # Variables cr√≠ticas (deben estar configuradas)
    critical_vars = {
        "MONGODB_URL": "URL de conexi√≥n a MongoDB",
        "MONGODB_DATABASE": "Nombre de la base de datos",
        "CLOUDINARY_CLOUD_NAME": "Nombre del cloud de Cloudinary",
        "CLOUDINARY_API_KEY": "API Key de Cloudinary",
        "CLOUDINARY_API_SECRET": "API Secret de Cloudinary"
    }
    
    # Variables opcionales (pueden tener valores por defecto)
    optional_vars = {
        "BASE_URL": "URL base de la API"
    }
    
    missing_critical = []
    missing_optional = []
    
    # Verificar variables cr√≠ticas
    for var, description in critical_vars.items():
        value = os.getenv(var)
        if value is None or value == "":
            missing_critical.append(f"‚ùå {var}: {description}")
        else:
            print(f"‚úÖ {var}: Configurada")
    
    # Verificar variables opcionales
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value is None or value == "":
            missing_optional.append(f"‚ùå {var}: {description}")
        else:
            print(f"‚úÖ {var}: Configurada")
    
    if missing_critical:
        print("\n‚ùå Variables cr√≠ticas faltantes:")
        for var in missing_critical:
            print(f"   {var}")
        assert False, f"Variables cr√≠ticas faltantes: {', '.join(missing_critical)}"
    
    if missing_optional:
        print("\n‚ö†Ô∏è Variables opcionales faltantes (se usar√°n valores por defecto):")
        for var in missing_optional:
            print(f"   {var}")
    
    print("‚úÖ Variables de entorno verificadas\n")

def test_imports():
    """Prueba que todos los m√≥dulos se puedan importar correctamente"""
    print("üì¶ Verificando imports de m√≥dulos...")
    
    try:
        # Agregar el directorio ra√≠z al path
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        
        # Imports principales
        import app
        import main
        import app.api.v1.api
        import app.core.config
        import app.db.mongodb
        
        print("‚úÖ M√≥dulos principales importados correctamente")
        
        # Verificar configuraci√≥n
        from app.core.config import settings
        print("‚úÖ Configuraci√≥n cargada correctamente")
        
        # Verificar modelos
        import app.models.solicitud
        import app.schemas.solicitud
        print("‚úÖ Modelos y schemas importados correctamente")
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {str(e)}")
        assert False, f"Error importando m√≥dulos: {str(e)}"
    except Exception as e:
        print(f"‚ùå Error verificando imports: {str(e)}")
        assert False, f"Error verificando imports: {str(e)}"

def test_configuration():
    """Prueba que la configuraci√≥n est√© correctamente definida"""
    print("‚öôÔ∏è Verificando configuraci√≥n de la aplicaci√≥n...")
    
    try:
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        from app.core.config import settings
        
        # Verificar que las variables de configuraci√≥n cr√≠ticas est√©n definidas
        critical_config = [
            'MONGODB_URL',
            'MONGODB_DATABASE',
            'CLOUDINARY_CLOUD_NAME',
            'CLOUDINARY_API_KEY',
            'CLOUDINARY_API_SECRET'
        ]
        
        # Verificar configuraciones opcionales
        optional_config = [
            'BASE_URL'
        ]
        
        # Verificar configuraciones cr√≠ticas
        for config_var in critical_config:
            value = getattr(settings, config_var, None)
            if value is None or value == "":
                print(f"‚ùå Configuraci√≥n cr√≠tica faltante: {config_var}")
                assert False, f"Configuraci√≥n cr√≠tica faltante: {config_var}"
            else:
                print(f"‚úÖ {config_var}: Configurado")
        
        # Verificar configuraciones opcionales
        for config_var in optional_config:
            value = getattr(settings, config_var, None)
            if value is None or value == "":
                print(f"‚ö†Ô∏è Configuraci√≥n opcional faltante: {config_var} (usando valor por defecto)")
            else:
                print(f"‚úÖ {config_var}: Configurado")
        
        print("‚úÖ Todas las configuraciones cr√≠ticas est√°n definidas")
        
    except Exception as e:
        print(f"‚ùå Error verificando configuraci√≥n: {str(e)}")
        assert False, f"Error verificando configuraci√≥n: {str(e)}"

async def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    print("üóÑÔ∏è Verificando conexi√≥n a MongoDB Atlas...")
    
    try:
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        from app.db.mongodb import mongodb
        
        # Verificar configuraci√≥n de MongoDB Atlas
        mongodb_url = os.getenv("MONGODB_URL", "")
        if "mongodb+srv://" in mongodb_url:
            print("‚úÖ URL de MongoDB Atlas detectada")
            
            # Intentar conectar a Atlas para verificar
            try:
                await mongodb.connect_to_mongo()
                await mongodb.client.admin.command('ping')
                print("‚úÖ Conexi√≥n exitosa a MongoDB Atlas")
                
                # Obtener informaci√≥n de la base de datos
                db_name = mongodb.database.name
                print(f"üìä Base de datos: {db_name}")
                
                # Listar colecciones
                collections = await mongodb.database.list_collection_names()
                print(f"üìã Colecciones encontradas: {collections}")
                
                # Contar documentos en cada colecci√≥n
                for collection_name in collections:
                    count = await mongodb.database[collection_name].count_documents({})
                    print(f"   üìÑ {collection_name}: {count} documentos")
                
                # Cerrar conexi√≥n
                await mongodb.close_mongo_connection()
                print("üîå Conexi√≥n a Atlas cerrada")
                
            except Exception as atlas_error:
                error_msg = str(atlas_error)
                if "SSL" in error_msg or "TLS" in error_msg:
                    print(f"‚ö†Ô∏è Error de SSL/TLS con MongoDB Atlas: {error_msg}")
                    print("‚ÑπÔ∏è Esto es com√∫n en entornos locales. En producci√≥n funcionar√° correctamente.")
                else:
                    print(f"‚ùå Error conectando a MongoDB Atlas: {error_msg}")
                print("‚ö†Ô∏è Atlas no disponible, pero el test contin√∫a")
                
        else:
            print("‚ö†Ô∏è No se detecta URL de MongoDB Atlas")
            print("‚ÑπÔ∏è Usando configuraci√≥n local como fallback")
        
        # Verificar que la configuraci√≥n de MongoDB est√© disponible
        if mongodb.client is None:
            print("‚ÑπÔ∏è Cliente MongoDB no inicializado (normal en tests)")
            print("‚úÖ Configuraci√≥n de MongoDB verificada")
        else:
            print("‚úÖ Cliente MongoDB inicializado")
            
    except Exception as e:
        print(f"‚ùå Error verificando MongoDB: {str(e)}")
        print("‚ö†Ô∏è MongoDB no disponible, pero el test contin√∫a")

def test_cloudinary_service():
    """Prueba que el servicio de Cloudinary est√© configurado"""
    print("‚òÅÔ∏è Verificando configuraci√≥n de Cloudinary...")
    
    try:
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        
        # Verificar variables de entorno de Cloudinary
        cloudinary_cloud_name = os.getenv("CLOUDINARY_CLOUD_NAME")
        cloudinary_api_key = os.getenv("CLOUDINARY_API_KEY")
        cloudinary_api_secret = os.getenv("CLOUDINARY_API_SECRET")
        
        if cloudinary_cloud_name and cloudinary_api_key and cloudinary_api_secret:
            print("‚úÖ Configuraci√≥n de Cloudinary verificada")
        else:
            print("‚ö†Ô∏è Variables de Cloudinary no configuradas")
            
    except Exception as e:
        print(f"‚ùå Error verificando Cloudinary: {str(e)}")
        print("‚ö†Ô∏è Cloudinary no disponible, pero el test contin√∫a")

def test_api_structure():
    """Prueba que la estructura de la API est√© correctamente definida"""
    print("üîó Verificando estructura de la API...")
    
    try:
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        from app.api.v1.api import api_router
        
        # Verificar que el router est√© definido
        if api_router is not None:
            print("‚úÖ Router de la API definido")
        else:
            print("‚ùå Router de la API no definido")
            assert False, "Router de la API no definido"
        
        # Verificar endpoints principales
        from app.api.v1.endpoints.solicitudes.vet import router as vet_router
        from app.api.v1.endpoints.solicitudes.user import router as user_router
        
        if vet_router is not None:
            print("‚úÖ Endpoints de veterinarios definidos")
        if user_router is not None:
            print("‚úÖ Endpoints de usuarios definidos")
            
    except Exception as e:
        print(f"‚ùå Error verificando estructura de API: {str(e)}")
        assert False, f"Error verificando estructura de API: {str(e)}"

async def run_deployment_tests():
    """Ejecuta todas las pruebas de despliegue"""
    print_header()
    
    tests = [
        ("Variables de entorno", test_environment_variables),
        ("Imports de m√≥dulos", test_imports),
        ("Configuraci√≥n", test_configuration),
        ("Conexi√≥n MongoDB", test_database_connection),
        ("Servicio Cloudinary", test_cloudinary_service),
        ("Estructura API", test_api_structure)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                await test_func()
            else:
                test_func()
            passed += 1
            print(f"‚úÖ {test_name}: PAS√ì")
        except Exception as e:
            print(f"‚ùå {test_name}: FALL√ì - {str(e)}")
    
    print(f"\n{'='*60}")
    print(f"üìä RESULTADOS: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El servicio est√° listo para despliegue.")
        return True
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores antes del despliegue.")
        return False

def main():
    """Funci√≥n principal"""
    try:
        success = asyncio.run(run_deployment_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Pruebas interrumpidas por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 