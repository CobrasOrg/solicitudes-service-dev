#!/usr/bin/env python3
"""
Script de pruebas de despliegue para el servicio de solicitudes.
Verifica que la aplicaci√≥n est√© lista para ser desplegada.
"""

import asyncio
import os
import sys
import requests
from datetime import datetime

def print_header():
    """Imprime el encabezado del script"""
    print("üöÄ PRUEBAS DE DESPLIEGUE - SERVICIO DE SOLICITUDES")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def test_environment_variables():
    """Prueba que las variables de entorno requeridas est√©n configuradas"""
    print("üîß Verificando variables de entorno...")
    
    required_vars = {
        "MONGODB_URL": "URL de conexi√≥n a MongoDB",
        "MONGODB_DATABASE": "Nombre de la base de datos",
        "CLOUDINARY_CLOUD_NAME": "Nombre del cloud de Cloudinary",
        "CLOUDINARY_API_KEY": "API Key de Cloudinary",
        "CLOUDINARY_API_SECRET": "API Secret de Cloudinary"
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value is None or value == "":
            missing_vars.append(f"‚ùå {var}: {description}")
        else:
            print(f"‚úÖ {var}: Configurada")
    
    if missing_vars:
        print("\n‚ùå Variables de entorno faltantes:")
        for var in missing_vars:
            print(f"   {var}")
        assert False, f"Variables de entorno faltantes: {', '.join(missing_vars)}"
    
    print("‚úÖ Todas las variables de entorno est√°n configuradas\n")

def test_server_running():
    """Prueba que el servidor est√© corriendo"""
    print("üåê Verificando que el servidor est√© corriendo...")
    
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor corriendo en http://localhost:8000")
        else:
            print(f"‚ùå Servidor respondi√≥ con c√≥digo {response.status_code}")
            assert False, f"Servidor respondi√≥ con c√≥digo {response.status_code}"
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor en http://localhost:8000")
        print("üí° Aseg√∫rate de ejecutar: python main.py")
        assert False, "No se puede conectar al servidor"
    except Exception as e:
        print(f"‚ùå Error verificando servidor: {str(e)}")
        assert False, f"Error verificando servidor: {str(e)}"

def test_health_endpoint():
    """Prueba el endpoint de health check"""
    print("üè• Verificando endpoint de health check...")
    
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        data = response.json()
        
        print(f"‚úÖ Status: {data.get('status', 'unknown')}")
        print(f"‚úÖ MongoDB: {data.get('mongodb', 'unknown')}")
        print(f"‚úÖ Firebase: {data.get('firebase', 'unknown')}")
        
    except Exception as e:
        print(f"‚ùå Error en health check: {str(e)}")
        assert False, f"Error en health check: {str(e)}"

def test_api_documentation():
    """Prueba que la documentaci√≥n de la API est√© accesible"""
    print("üìö Verificando documentaci√≥n de la API...")
    
    endpoints = [
        ("/docs", "Swagger UI"),
        ("/redoc", "ReDoc"),
        ("/", "Root endpoint")
    ]
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name}: Accesible")
            else:
                print(f"‚ùå {name}: C√≥digo {response.status_code}")
                assert False, f"{name} respondi√≥ con c√≥digo {response.status_code}"
        except Exception as e:
            print(f"‚ùå {name}: Error - {str(e)}")
            assert False, f"Error en {name}: {str(e)}"

def test_api_endpoints():
    """Prueba que los endpoints principales de la API funcionen"""
    print("üîó Verificando endpoints de la API...")
    
    endpoints = [
        ("/api/v1/vet/solicitudes/", "GET", "Listar solicitudes"),
        ("/api/v1/vet/solicitudes/filtrar", "GET", "Filtrar solicitudes")
    ]
    
    for endpoint, method, description in endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            if response.status_code in [200, 500]:  # 500 es aceptable si no hay DB
                print(f"‚úÖ {description}: Respondiendo")
            else:
                print(f"‚ùå {description}: C√≥digo {response.status_code}")
                assert False, f"{description} respondi√≥ con c√≥digo {response.status_code}"
        except Exception as e:
            print(f"‚ùå {description}: Error - {str(e)}")
            assert False, f"Error en {description}: {str(e)}"

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    print("üóÑÔ∏è Verificando conexi√≥n a MongoDB...")
    
    try:
        # Agregar el directorio ra√≠z al path
        import sys
        import os
        sys.path.insert(0, os.path.abspath(os.path.dirname(__file__) + '/../..'))
        
        # Importar aqu√≠ para evitar errores si no est√° configurado
        from app.db.mongodb import mongodb
        
        # Verificar si ya est√° conectado
        if mongodb.client is not None:
            print("‚úÖ MongoDB ya est√° conectado")
            return
        
        # Intentar conectar usando requests para verificar el health endpoint
        import requests
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('mongodb') == 'healthy':
                print("‚úÖ Conexi√≥n a MongoDB verificada via health endpoint")
            else:
                print(f"‚ö†Ô∏è MongoDB status: {data.get('mongodb', 'unknown')}")
        else:
            print(f"‚ö†Ô∏è No se pudo verificar MongoDB via health endpoint: {response.status_code}")
            
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {str(e)}")
        assert False, f"Error importando m√≥dulos: {str(e)}"
    except Exception as e:
        print(f"‚ùå Error verificando MongoDB: {str(e)}")
        # No fallar el test si MongoDB no est√° disponible
        print("‚ö†Ô∏è MongoDB no disponible, pero el test contin√∫a")

async def run_deployment_tests():
    """Ejecuta todas las pruebas de despliegue"""
    print_header()
    
    tests = [
        ("Variables de entorno", test_environment_variables),
        ("Servidor corriendo", test_server_running),
        ("Health endpoint", test_health_endpoint),
        ("Documentaci√≥n API", test_api_documentation),
        ("Endpoints API", test_api_endpoints),
        ("Conexi√≥n MongoDB", test_database_connection)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            test_func()
            passed += 1
            print(f"‚úÖ {test_name}: PAS√ì")
        except Exception as e:
            print(f"‚ùå {test_name}: FALL√ì - {str(e)}")
    
    print(f"\n{'='*60}")
    print(f"üìä RESULTADOS: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El servicio est√° listo para despliegue.")
        return True
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores antes del despliegue.")
        return False

def main():
    """Funci√≥n principal"""
    try:
        success = asyncio.run(run_deployment_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Pruebas interrumpidas por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 